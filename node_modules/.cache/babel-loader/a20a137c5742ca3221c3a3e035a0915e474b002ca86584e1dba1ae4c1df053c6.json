{"ast":null,"code":"var _jsxFileName = \"D:\\\\DEV WORK\\\\front-end-library\\\\clones\\\\Tic Tac Toe\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\"; // import useState from react\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  // Square is a component that takes in two props: value and onSquareClick\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this) // when button is clicked, call onSquareClick\n  ;\n}\n_c = Square;\nfunction Board() {\n  _s();\n  // Board is a component that returns 9 Squares\n  const [xIsNext, setXIsNext] = useState(true); // xIsNext is a boolean that is true if it is X's turn and false if it is O's turn\n  const [squares, setSquares] = useState(Array(9).fill(null)); // squares is an array of 9 elements, each element is either null, \"X\", or \"O\"\n\n  function handleClick(i) {\n    // handleClick takes in an index i\n    if (squares[i] || calculateWinner(squares)) {\n      // if square is already filled or if there is a winner,\n      return; // if square is already filled, return (do nothing\n    }\n    const nextSquares = squares.slice(); // copy squares array\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    } // set nextSquares[i] to \"X\" if it is X's turn, otherwise set it to \"O\"\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext); // set xIsNext to the opposite of what it was\n  }\n  const winner = calculateWinner(squares); // winner is either null, \"X\", or \"O\"\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); // if xIsNext is true, status is \"Next player: X\", otherwise status is \"Next player: O\"\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"coMecpjTzg1W7KUe5tSm+DrcByQ=\");\n_c2 = Board;\nfunction calculateWinner(squares) {\n  // calculateWinner takes in an array of 9 elements, each element is either null, \"X\", or \"O\"\n  const lines = [\n  // lines is an array of arrays, each array contains 3 numbers\n  [0, 1, 2],\n  // horizontal\n  [3, 4, 5],\n  // horizontal\n  [6, 7, 8],\n  // horizontal\n  [0, 3, 6],\n  // vertical\n  [1, 4, 7],\n  // vertical\n  [2, 5, 8],\n  // vertical\n  [0, 4, 8],\n  // diagonal\n  [2, 4, 6] // diagonal\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    // for each array in lines\n    const [a, b, c] = lines[i]; // a, b, and c are the 3 numbers in the array\n    if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n      // if squares[a] is not null and squares[a] is equal to squares[b] and squares[b] is equal to squares[c],\n      return squares[a];\n    } // if squares[a] is not null and squares[a] is equal to squares[b] and squares[b] is equal to squares[c], return squares[a]\n  }\n  return null;\n}\nexport default function Game() {\n  _s2();\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n// I am overwhelmed by this react Tic Tac Toe game can you explain to me step by step?\n// I will try to explain it to you step by step\n// first, we have a function called calculateWinner\n// calculateWinner takes in an array of 9 elements, each element is either null, \"X\", or \"O\"\n// calculateWinner returns either null, \"X\", or \"O\"\n// calculateWinner checks if there is a winner\n// if there is a winner, calculateWinner returns the winner\n// if there is no winner, calculateWinner returns null\n// next, we have a function called Square\n// Square is a component that takes in two props: value and onSquareClick\n// Square returns a button\n// when the button is clicked, it calls onSquareClick\n// next, we have a function called Board\n// Board is a component that returns 9 Squares\n// Board also returns a div with the status\n// Board has two states: xIsNext and squares\n// xIsNext is a boolean that is true if it is X's turn and false if it is O's turn\n// squares is an array of 9 elements, each element is either null, \"X\", or \"O\"\n// Board has a function called handleClick\n// handleClick takes in an index i\n// handleClick checks if the square at index i is already filled\n// if the square at index i is already filled, handleClick does nothing\n// if the square at index i is not filled, handleClick fills the square with either \"X\" or \"O\"\n// if it is X's turn, handleClick fills the square with \"X\"\n// if it is O's turn, handleClick fills the square with \"O\"\n// next, we have a function called App\n// App returns a Board\n// App is the root component\n// App is rendered by index.js\n// index.js renders App to the DOM\n// index.js is the entry point of our application\n// index.js renders App to the DOM\n\n// I would love for us to have another interractive lesson like this. Do you have any other ideas? Like creating a game like this one or anything interesting?\n// I can think of a few ideas\n// we can make a game like this one\n// What game are we creating this time around?\n// we can make a game like this one\n// https://www.youtube.com/watch?v=QZcNGfcn-oo\n_s2(Game, \"SgYnsXT3crq7e7AVQFAc92TDVPk=\");\n_c3 = Game;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","_s","xIsNext","setXIsNext","squares","setSquares","Array","fill","handleClick","i","calculateWinner","nextSquares","slice","winner","status","_c2","lines","length","a","b","c","Game","_s2","history","setHistory","_c3","$RefreshReg$"],"sources":["D:/DEV WORK/front-end-library/clones/Tic Tac Toe/src/App.js"],"sourcesContent":["import { useState } from \"react\"; // import useState from react\n\nfunction Square({ value, onSquareClick }) {\n  // Square is a component that takes in two props: value and onSquareClick\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button> // when button is clicked, call onSquareClick\n  );\n}\n\nfunction Board() {\n  // Board is a component that returns 9 Squares\n  const [xIsNext, setXIsNext] = useState(true); // xIsNext is a boolean that is true if it is X's turn and false if it is O's turn\n  const [squares, setSquares] = useState(Array(9).fill(null)); // squares is an array of 9 elements, each element is either null, \"X\", or \"O\"\n\n  function handleClick(i) {\n    // handleClick takes in an index i\n    if (squares[i] || calculateWinner(squares)) {\n      // if square is already filled or if there is a winner,\n      return; // if square is already filled, return (do nothing\n    }\n    const nextSquares = squares.slice(); // copy squares array\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    } // set nextSquares[i] to \"X\" if it is X's turn, otherwise set it to \"O\"\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext); // set xIsNext to the opposite of what it was\n  }\n\n  const winner = calculateWinner(squares); // winner is either null, \"X\", or \"O\"\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); // if xIsNext is true, status is \"Next player: X\", otherwise status is \"Next player: O\"\n  }\n  return (\n    <>\n      <div className=\"status\">{status}</div> {/* display status  */}\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n      {/* // return 9 Squares, each with a value and an onSquareClick function */}\n    </>\n  );\n}\n\nfunction calculateWinner(squares) {\n  // calculateWinner takes in an array of 9 elements, each element is either null, \"X\", or \"O\"\n  const lines = [\n    // lines is an array of arrays, each array contains 3 numbers\n    [0, 1, 2], // horizontal\n    [3, 4, 5], // horizontal\n    [6, 7, 8], // horizontal\n    [0, 3, 6], // vertical\n    [1, 4, 7], // vertical\n    [2, 5, 8], // vertical\n    [0, 4, 8], // diagonal\n    [2, 4, 6], // diagonal\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    // for each array in lines\n    const [a, b, c] = lines[i]; // a, b, and c are the 3 numbers in the array\n    if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n      // if squares[a] is not null and squares[a] is equal to squares[b] and squares[b] is equal to squares[c],\n      return squares[a];\n    } // if squares[a] is not null and squares[a] is equal to squares[b] and squares[b] is equal to squares[c], return squares[a]\n  }\n  return null;\n}\n\n\nexport default function Game(){\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)])\n\n  return(\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board/>\n      </div>\n      <div className=\"game-info\">\n        <ol></ol>\n      </div>\n    </div>\n  )\n}\n\n// I am overwhelmed by this react Tic Tac Toe game can you explain to me step by step?\n// I will try to explain it to you step by step\n// first, we have a function called calculateWinner\n// calculateWinner takes in an array of 9 elements, each element is either null, \"X\", or \"O\"\n// calculateWinner returns either null, \"X\", or \"O\"\n// calculateWinner checks if there is a winner\n// if there is a winner, calculateWinner returns the winner\n// if there is no winner, calculateWinner returns null\n// next, we have a function called Square\n// Square is a component that takes in two props: value and onSquareClick\n// Square returns a button\n// when the button is clicked, it calls onSquareClick\n// next, we have a function called Board\n// Board is a component that returns 9 Squares\n// Board also returns a div with the status\n// Board has two states: xIsNext and squares\n// xIsNext is a boolean that is true if it is X's turn and false if it is O's turn\n// squares is an array of 9 elements, each element is either null, \"X\", or \"O\"\n// Board has a function called handleClick\n// handleClick takes in an index i\n// handleClick checks if the square at index i is already filled\n// if the square at index i is already filled, handleClick does nothing\n// if the square at index i is not filled, handleClick fills the square with either \"X\" or \"O\"\n// if it is X's turn, handleClick fills the square with \"X\"\n// if it is O's turn, handleClick fills the square with \"O\"\n// next, we have a function called App\n// App returns a Board\n// App is the root component\n// App is rendered by index.js\n// index.js renders App to the DOM\n// index.js is the entry point of our application\n// index.js renders App to the DOM\n\n\n// I would love for us to have another interractive lesson like this. Do you have any other ideas? Like creating a game like this one or anything interesting?\n// I can think of a few ideas\n// we can make a game like this one\n// What game are we creating this time around?\n// we can make a game like this one\n// https://www.youtube.com/watch?v=QZcNGfcn-oo\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}